
stm32h7-asm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000130  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003c8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  24000000  080003d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000014  080003e4  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  080003e4  00020030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_line   000000ff  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   00000048  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000026  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000048  00000000  00000000  000201b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    000000b1  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000020  00000000  00000000  000202b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00000094  00000000  00000000  000202d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080003b0 	.word	0x080003b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	080003b0 	.word	0x080003b0

080002d8 <main>:
  .type  main, %function
  .global main

   	   	.align
main:
  		ldr r0, =STEV1   // Naslov od STEV1 -> r0
 80002d8:	481d      	ldr	r0, [pc, #116]	; (8000350 <LOOP+0xa>)
  		ldr r1, [r0]    // Vsebina iz naslova v r0 -> r1
 80002da:	6801      	ldr	r1, [r0, #0]

  		ldr r0, =STEV2   // Naslov od STEV1 -> r0
 80002dc:	481d      	ldr	r0, [pc, #116]	; (8000354 <LOOP+0xe>)
  		ldr r2, [r0]	// Vsebina iz naslova v r0 -> r2
 80002de:	6802      	ldr	r2, [r0, #0]

  		add r3,r1,r2    // r1 + r2 -> r3
 80002e0:	eb01 0302 	add.w	r3, r1, r2

  		ldr r0, =VSOTA   // Naslov od STEV1 -> r0
 80002e4:	481c      	ldr	r0, [pc, #112]	; (8000358 <LOOP+0x12>)
  		str r3,[r0]		// iz registra r3 -> na naslov v r0
 80002e6:	6003      	str	r3, [r0, #0]

	    bl 	INIT_IO
 80002e8:	f000 f810 	bl	800030c <INIT_IO>

	    mov	r8,#0     // Clear ms counter
 80002ec:	f04f 0800 	mov.w	r8, #0

080002f0 <loop>:

loop:
		bl LED_ON
 80002f0:	f000 f81a 	bl	8000328 <LED_ON>

		mov r0,#500
 80002f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		bl DELAY	 	// Software Delay
 80002f8:	f000 f822 	bl	8000340 <DELAY>

		bl LED_OFF
 80002fc:	f000 f81a 	bl	8000334 <LED_OFF>

		mov r0,#500
 8000300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		bl DELAY	 	// Software Delay
 8000304:	f000 f81c 	bl	8000340 <DELAY>

		b loop                      // Jump to loop
 8000308:	e7f2      	b.n	80002f0 <loop>

0800030a <__end>:


__end: 	b 	__end
 800030a:	e7fe      	b.n	800030a <__end>

0800030c <INIT_IO>:



INIT_IO:
  	push {r5, r6, lr}
 800030c:	b560      	push	{r5, r6, lr}

	// Enable GPIOD Peripheral Clock (bit 3 in AHB1ENR register)
	ldr r6, = RCC_AHB4ENR       // Load peripheral clock reg address to r6
 800030e:	4e13      	ldr	r6, [pc, #76]	; (800035c <LOOP+0x16>)
	ldr r5, [r6]                // Read its content to r5
 8000310:	6835      	ldr	r5, [r6, #0]
	orr r5, #0x00000100          // Set bit 8 to enable GPIOI clock
 8000312:	f445 7580 	orr.w	r5, r5, #256	; 0x100
	str r5, [r6]                // Store result in peripheral clock register
 8000316:	6035      	str	r5, [r6, #0]

	// Make GPIOI Pin13 as output pin (bits 27:26 in MODER register)
	ldr r6, =GPIOI_BASE       // Load GPIOD BASE address to r6
 8000318:	4e11      	ldr	r6, [pc, #68]	; (8000360 <LOOP+0x1a>)
	ldr r5, [r6,#GPIOx_MODER]  // Read GPIOD_MODER content to r5
 800031a:	6835      	ldr	r5, [r6, #0]
	and r5, #0xF3FFFFFF          // Clear bits 27-26 for P13
 800031c:	f025 6540 	bic.w	r5, r5, #201326592	; 0xc000000
	orr r5, #0x04000000          // Write 01 to bits 27-26 for P13
 8000320:	f045 6580 	orr.w	r5, r5, #67108864	; 0x4000000
	str r5, [r6]                // Store result in GPIO MODER register
 8000324:	6035      	str	r5, [r6, #0]

  	pop {r5, r6, pc}
 8000326:	bd60      	pop	{r5, r6, pc}

08000328 <LED_ON>:



LED_ON:
    push {r5, r6, lr}
 8000328:	b560      	push	{r5, r6, lr}
	// Set GPIOx Pins to 1 (through BSSR register)
	ldr    r6, =GPIOI_BASE       // Load GPIOI BASE address to r6
 800032a:	4e0d      	ldr	r6, [pc, #52]	; (8000360 <LOOP+0x1a>)
	mov    r5, #LEDs_ON
 800032c:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
	str    r5, [r6,#GPIOx_BSSR] // Write to BSRR register
 8000330:	61b5      	str	r5, [r6, #24]
  	pop {r5, r6, pc}
 8000332:	bd60      	pop	{r5, r6, pc}

08000334 <LED_OFF>:

LED_OFF:
    push {r5, r6, lr}
 8000334:	b560      	push	{r5, r6, lr}
	// Set GPIOx Pins to 0 (through BSSR register)
	ldr    r6, =GPIOI_BASE       // Load GPIOI BASE address to r6
 8000336:	4e0a      	ldr	r6, [pc, #40]	; (8000360 <LOOP+0x1a>)
	mov    r5, #LEDs_OFF
 8000338:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	str    r5, [r6,#GPIOx_BSSR] // Write to BSRR register
 800033c:	61b5      	str	r5, [r6, #24]
  	pop {r5, r6, pc}
 800033e:	bd60      	pop	{r5, r6, pc}

08000340 <DELAY>:


// Delay with internal SW loop approx. r0 x ms
DELAY:
    push {r1, lr}
 8000340:	b502      	push	{r1, lr}

08000342 <MSEC>:

MSEC: ldr r1,=LEDDELAY
 8000342:	f44f 417a 	mov.w	r1, #64000	; 0xfa00

08000346 <LOOP>:
LOOP:    subs r1, r1, #1
 8000346:	3901      	subs	r1, #1
         bne LOOP
 8000348:	d1fd      	bne.n	8000346 <LOOP>

      subs r0, r0, #1
 800034a:	3801      	subs	r0, #1
      bne MSEC
 800034c:	d1f9      	bne.n	8000342 <MSEC>
    pop {r1, pc}
 800034e:	bd02      	pop	{r1, pc}
  		ldr r0, =STEV1   // Naslov od STEV1 -> r0
 8000350:	24000004 	.word	0x24000004
  		ldr r0, =STEV2   // Naslov od STEV1 -> r0
 8000354:	24000008 	.word	0x24000008
  		ldr r0, =VSOTA   // Naslov od STEV1 -> r0
 8000358:	2400000c 	.word	0x2400000c
	ldr r6, = RCC_AHB4ENR       // Load peripheral clock reg address to r6
 800035c:	580244e0 	.word	0x580244e0
	ldr r6, =GPIOI_BASE       // Load GPIOD BASE address to r6
 8000360:	58022000 	.word	0x58022000

08000364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000364:	f8df d02c 	ldr.w	sp, [pc, #44]	; 8000394 <LoopFillZerobss+0xa>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000368:	480b      	ldr	r0, [pc, #44]	; (8000398 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800036a:	490c      	ldr	r1, [pc, #48]	; (800039c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800036c:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800036e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000370:	e002      	b.n	8000378 <LoopCopyDataInit>

08000372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000376:	3304      	adds	r3, #4

08000378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800037a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800037c:	d3f9      	bcc.n	8000372 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037e:	4a09      	ldr	r2, [pc, #36]	; (80003a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000380:	4c09      	ldr	r4, [pc, #36]	; (80003a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000384:	e001      	b.n	800038a <LoopFillZerobss>

08000386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000388:	3204      	adds	r2, #4

0800038a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800038a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800038c:	d3fb      	bcc.n	8000386 <FillZerobss>

/* Call the application's entry point.*/
//eternal:  b  eternal
  bl  main
 800038e:	f7ff ffa3 	bl	80002d8 <main>
  bx  lr
 8000392:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000394:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000398:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800039c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80003a0:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 80003a4:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80003a8:	24000030 	.word	0x24000030

080003ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC3_IRQHandler>
	...

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
